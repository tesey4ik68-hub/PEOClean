using iText.Kernel.Pdf;
using iText.Layout;
using iText.Layout.Element;
using iText.Layout.Properties;
using iText.IO.Font.Constants;
using iText.Kernel.Font;
using Microsoft.EntityFrameworkCore;
using PEOcleanWPFApp.Data;
using PEOcleanWPFApp.Models;

namespace PEOcleanWPFApp.Services;

public class PdfReportService
{
    private readonly ApplicationDbContext _context;
    private readonly PaymentCalculationService _paymentService;

    public PdfReportService(ApplicationDbContext context, PaymentCalculationService paymentService)
    {
        _context = context;
        _paymentService = paymentService;
    }

    /// <summary>
    /// Generates a payment memo PDF
    /// </summary>
    public void GeneratePaymentMemo(int employeeId, DateTime startDate, DateTime endDate, string filePath)
    {
        var employee = _context.Employees.Find(employeeId);
        if (employee == null) throw new ArgumentException("Employee not found");

        var summary = _paymentService.GetEmployeeWorkSummary(employeeId, startDate, endDate);

        using var writer = new PdfWriter(filePath);
        using var pdf = new PdfDocument(writer);
        var document = new Document(pdf);

        // Title
        var boldFont = PdfFontFactory.CreateFont(StandardFonts.HELVETICA_BOLD);
        var title = new Paragraph("–°–õ–£–ñ–ï–ë–ù–ê–Ø –ó–ê–ü–ò–°–ö–ê")
            .SetTextAlignment(TextAlignment.CENTER)
            .SetFontSize(16)
            .SetFont(boldFont);
        document.Add(title);

        document.Add(new Paragraph($"–ù–∞ –≤—ã–ø–ª–∞—Ç—É –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è {employee.FullName}")
            .SetTextAlignment(TextAlignment.CENTER)
            .SetFontSize(14)
            .SetMarginBottom(20));

        // Period
        document.Add(new Paragraph($"–ü–µ—Ä–∏–æ–¥: {startDate:dd.MM.yyyy} - {endDate:dd.MM.yyyy}")
            .SetMarginBottom(15));

        // Work summary
        var table = new Table(UnitValue.CreatePercentArray(new float[] { 3, 2, 2, 2 }))
            .UseAllAvailableWidth();

        table.AddHeaderCell("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å");
        table.AddHeaderCell("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ");
        table.AddHeaderCell("–ï–¥. –∏–∑–º.");
        table.AddHeaderCell("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ");

        table.AddCell("–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–Ω–µ–π");
        table.AddCell(summary.TotalWorkedDays.ToString());
        table.AddCell("–¥–Ω–µ–π");
        table.AddCell("");

        table.AddCell("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å —Ñ–æ—Ç–æ");
        table.AddCell(summary.DaysWithPhoto.ToString());
        table.AddCell("–¥–Ω–µ–π");
        table.AddCell("");

        table.AddCell("–°—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ");
        table.AddCell($"{summary.TotalPayment:N2}");
        table.AddCell("—Ä—É–±.");
        table.AddCell("");

        document.Add(table);
        var total = new Paragraph($"–ò—Ç–æ–≥–æ –∫ –≤—ã–ø–ª–∞—Ç–µ: {summary.TotalPayment:N2} —Ä—É–±–ª–µ–π")
            .SetMarginTop(20)
            .SetFont(boldFont);
        document.Add(total);

        document.Close();
    }

    /// <summary>
    /// Generates an act of completed works PDF
    /// </summary>
    public void GenerateWorkCompletionAct(int employeeId, DateTime startDate, DateTime endDate, string filePath)
    {
        var employee = _context.Employees.Find(employeeId);
        if (employee == null) throw new ArgumentException("Employee not found");

        var workReports = _context.WorkReports
            .Where(wr => wr.EmployeeId == employeeId &&
                        wr.Date >= startDate &&
                        wr.Date <= endDate &&
                        wr.IsCompleted)
            .Include(wr => wr.ServiceAddress)
            .Include(wr => wr.WorkType)
            .OrderBy(wr => wr.Date)
            .ToList();

        using var writer = new PdfWriter(filePath);
        using var pdf = new PdfDocument(writer);
        var document = new Document(pdf);

        // Title
        var boldFont = PdfFontFactory.CreateFont(StandardFonts.HELVETICA_BOLD);
        var title = new Paragraph("–ê–ö–¢ –í–´–ü–û–õ–ù–ï–ù–ù–´–• –†–ê–ë–û–¢")
            .SetTextAlignment(TextAlignment.CENTER)
            .SetFontSize(16)
            .SetFont(boldFont);
        document.Add(title);

        document.Add(new Paragraph($"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {employee.FullName}")
            .SetMarginBottom(10));

        document.Add(new Paragraph($"–ü–µ—Ä–∏–æ–¥: {startDate:dd.MM.yyyy} - {endDate:dd.MM.yyyy}")
            .SetMarginBottom(20));

        // Work details table
        var table = new Table(UnitValue.CreatePercentArray(new float[] { 2, 3, 3, 2 }))
            .UseAllAvailableWidth();

        table.AddHeaderCell("–î–∞—Ç–∞");
        table.AddHeaderCell("–ê–¥—Ä–µ—Å");
        table.AddHeaderCell("–í–∏–¥ —Ä–∞–±–æ—Ç—ã");
        table.AddHeaderCell("–§–æ—Ç–æ");

        foreach (var report in workReports)
        {
            table.AddCell(report.Date.ToString("dd.MM.yyyy"));
            table.AddCell(report.ServiceAddress.Address);
            table.AddCell(report.WorkType.Name);
            table.AddCell(string.IsNullOrEmpty(report.PhotoPath) ? "–ù–µ—Ç" : "–ï—Å—Ç—å");
        }

        document.Add(table);

        // Summary
        var summary = new Paragraph($"–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–±–æ—Ç: {workReports.Count}")
            .SetMarginTop(20)
            .SetFont(boldFont);
        document.Add(summary);

        document.Close();
    }

    /// <summary>
    /// Generates monthly attendance report PDF
    /// </summary>
    public void GenerateMonthlyAttendanceReport(int year, int month, string filePath)
    {
        var startDate = new DateTime(year, month, 1);
        var endDate = startDate.AddMonths(1).AddDays(-1);

        var employees = _context.Employees.ToList();

        using var writer = new PdfWriter(filePath);
        using var pdf = new PdfDocument(writer);
        var document = new Document(pdf);

        // Title
        var boldFont = PdfFontFactory.CreateFont(StandardFonts.HELVETICA_BOLD);
        var title = new Paragraph($"–¢–ê–ë–ï–õ–¨ –£–ß–Å–¢–ê –†–ê–ë–û–¢–´ –ó–ê {month:00}.{year}")
            .SetTextAlignment(TextAlignment.CENTER)
            .SetFontSize(16)
            .SetFont(boldFont);
        document.Add(title);
        document.Add(new Paragraph("").SetMarginBottom(20));

        // Create table with days as columns
        var daysInMonth = DateTime.DaysInMonth(year, month);
        var columnWidths = new float[daysInMonth + 1];
        columnWidths[0] = 3; // Employee name column
        for (int i = 1; i <= daysInMonth; i++) columnWidths[i] = 1;

        var table = new Table(UnitValue.CreatePercentArray(columnWidths))
            .UseAllAvailableWidth();

        // Header row
        table.AddHeaderCell("–°–æ—Ç—Ä—É–¥–Ω–∏–∫");
        for (int day = 1; day <= daysInMonth; day++)
        {
            table.AddHeaderCell(day.ToString());
        }

        // Data rows
        foreach (var employee in employees)
        {
            table.AddCell(employee.FullName);

            for (int day = 1; day <= daysInMonth; day++)
            {
                var date = new DateTime(year, month, day);
                var attendance = _context.AttendanceRecords
                    .FirstOrDefault(ar => ar.EmployeeId == employee.Id && ar.Date.Date == date);

                string status = attendance == null ? "-" :
                    attendance.Status == AbsenceType.Worked ?
                        (attendance.HasPhoto ? "‚úÖ" : "‚ö™") :
                    attendance.Status == AbsenceType.NotWorked ? "‚ùå" : "üîÑ";

                table.AddCell(status);
            }
        }

        document.Add(table);
        document.Close();
    }
}
